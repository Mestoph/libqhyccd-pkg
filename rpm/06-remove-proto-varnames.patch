Remove variable names in prototypes as some compilers whine about them
--- usr/local/include/qhyccd.h	2019-02-14 23:44:08.799526580 +0000
+++ usr/local/include/qhyccd.h	2019-02-14 23:54:46.314758437 +0000
@@ -31,8 +31,8 @@
 #endif
 #endif
 
-EXPORTC void STDCALL EnableQHYCCDMessage(bool enable);
-EXPORTC void STDCALL EnableQHYCCDLogFile(bool enable);
+EXPORTC void STDCALL EnableQHYCCDMessage(bool);
+EXPORTC void STDCALL EnableQHYCCDLogFile(bool);
 
 EXPORTC const char* STDCALL GetTimeStamp();
 
@@ -53,7 +53,7 @@
 	  another QHYCCD_ERROR code on other failures
   */
 EXPORTC uint32_t STDCALL ReleaseQHYCCDResource(void);
-EXPORTC uint32_t STDCALL ReleaseQHYCCDResourceOne(qhyccd_handle *h);
+EXPORTC uint32_t STDCALL ReleaseQHYCCDResourceOne(qhyccd_handle *);
 
 /** \fn uint32_t ScanQHYCCD()
       \brief scan the connected cameras
@@ -72,7 +72,7 @@
 	  on success,return QHYCCD_SUCCESS \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL GetQHYCCDId(uint32_t index,char *id);
+EXPORTC uint32_t STDCALL GetQHYCCDId(uint32_t,char *);
 
 /** \fn uint32_t GetQHYCCDModel(char *id, char *model)
       \brief get camera model name by id
@@ -82,7 +82,7 @@
           on success,return QHYCCD_SUCCESS \n
           another QHYCCD_ERROR code in failure
   */
-EXPORTC uint32_t STDCALL GetQHYCCDModel(char *id, char *model);
+EXPORTC uint32_t STDCALL GetQHYCCDModel(char *, char *);
 
 /** \fn qhyccd_handle *OpenQHYCCD(char *id)
       \brief open camera by camera id
@@ -91,7 +91,7 @@
 	  on success,return QHYCCD_SUCCESS \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC qhyccd_handle * STDCALL OpenQHYCCD(char *id);
+EXPORTC qhyccd_handle * STDCALL OpenQHYCCD(char *);
 
 /** \fn uint32_t CloseQHYCCD(qhyccd_handle *handle)
       \brief close camera by handle
@@ -100,7 +100,7 @@
 	  on success,return QHYCCD_SUCCESS \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL CloseQHYCCD(qhyccd_handle *handle);
+EXPORTC uint32_t STDCALL CloseQHYCCD(qhyccd_handle *);
 
 /**
  @fn uint32_t SetQHYCCDStreamMode(qhyccd_handle *handle,uint8_t mode)
@@ -113,7 +113,7 @@
  on success,return QHYCCD_SUCCESS \n
  another QHYCCD_ERROR code on other failures
  */
-EXPORTC uint32_t STDCALL SetQHYCCDStreamMode(qhyccd_handle *handle,uint8_t mode);
+EXPORTC uint32_t STDCALL SetQHYCCDStreamMode(qhyccd_handle *,uint8_t );
 
 /** \fn uint32_t InitQHYCCD(qhyccd_handle *handle)
       \brief initialization specified camera by camera handle
@@ -123,7 +123,7 @@
 	  on failed,return QHYCCD_ERROR_INITCAMERA \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL InitQHYCCD(qhyccd_handle *handle);
+EXPORTC uint32_t STDCALL InitQHYCCD(qhyccd_handle *);
 
 /** @fn uint32_t IsQHYCCDControlAvailable(qhyccd_handle *handle,CONTROL_ID controlId)
     @brief check the camera has the queried function or not
@@ -134,7 +134,7 @@
 	  on do not have,return QHYCCD_ERROR_NOTSUPPORT \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL IsQHYCCDControlAvailable(qhyccd_handle *handle,CONTROL_ID controlId);
+EXPORTC uint32_t STDCALL IsQHYCCDControlAvailable(qhyccd_handle *,CONTROL_ID );
 
 /** \fn uint32_t SetQHYCCDParam(qhyccd_handle *handle,CONTROL_ID controlId,double value)
       \brief set params to camera
@@ -147,7 +147,7 @@
 	  QHYCCD_ERROR_SETPARAMS,if set params to camera failed \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL SetQHYCCDParam(qhyccd_handle *handle,CONTROL_ID controlId, double value);
+EXPORTC uint32_t STDCALL SetQHYCCDParam(qhyccd_handle *,CONTROL_ID , double );
 
 /** \fn double GetQHYCCDParam(qhyccd_handle *handle,CONTROL_ID controlId)
       \brief get the params value from camera
@@ -159,7 +159,7 @@
 	  QHYCCD_ERROR_GETPARAMS,if get camera params'value failed \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC double STDCALL GetQHYCCDParam(qhyccd_handle *handle,CONTROL_ID controlId);
+EXPORTC double STDCALL GetQHYCCDParam(qhyccd_handle *,CONTROL_ID );
 
 /** \fn uint32_t GetQHYCCDParamMinMaxStep(qhyccd_handle *handle,CONTROL_ID controlId,double *min,double *max,double *step)
       \brief get the params value from camera
@@ -173,7 +173,7 @@
 	  QHYCCD_ERROR_NOTSUPPORT,if the camera do not have the function \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL GetQHYCCDParamMinMaxStep(qhyccd_handle *handle,CONTROL_ID controlId,double *min,double *max,double *step);
+EXPORTC uint32_t STDCALL GetQHYCCDParamMinMaxStep(qhyccd_handle *,CONTROL_ID,double *,double *,double *);
 
 /** @fn uint32_t SetQHYCCDResolution(qhyccd_handle *handle,uint32_t x,uint32_t y,uint32_t xsize,uint32_t ysize)
     @brief set camera ouput resolution
@@ -186,7 +186,7 @@
         on success,return QHYCCD_SUCCESS\n
         another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL SetQHYCCDResolution(qhyccd_handle *handle,uint32_t x,uint32_t y,uint32_t xsize,uint32_t ysize);
+EXPORTC uint32_t STDCALL SetQHYCCDResolution(qhyccd_handle *,uint32_t,uint32_t,uint32_t,uint32_t);
 
 /** \fn uint32_t GetQHYCCDMemLength(qhyccd_handle *handle)
       \brief get the minimum memory space for image data to save(byte)
@@ -195,7 +195,7 @@
 	  on success,return the total memory space for image data(byte) \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL GetQHYCCDMemLength(qhyccd_handle *handle);
+EXPORTC uint32_t STDCALL GetQHYCCDMemLength(qhyccd_handle *);
 
 /** \fn uint32_t ExpQHYCCDSingleFrame(qhyccd_handle *handle)
       \brief start to expose one frame
@@ -206,7 +206,7 @@
 	  QHYCCD_ERROR_EXPFAILED,if start failed \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL ExpQHYCCDSingleFrame(qhyccd_handle *handle);
+EXPORTC uint32_t STDCALL ExpQHYCCDSingleFrame(qhyccd_handle *);
 
 /**
    @fn uint32_t GetQHYCCDSingleFrame(qhyccd_handle *handle,uint32_t *w,uint32_t *h,uint32_t *bpp,uint32_t *channels,uint8_t *imgdata)
@@ -222,7 +222,7 @@
    QHYCCD_ERROR_GETTINGFAILED,if get data failed \n
    another QHYCCD_ERROR code on other failures
  */
-EXPORTC uint32_t STDCALL GetQHYCCDSingleFrame(qhyccd_handle *handle,uint32_t *w,uint32_t *h,uint32_t *bpp,uint32_t *channels,uint8_t *imgdata);
+EXPORTC uint32_t STDCALL GetQHYCCDSingleFrame(qhyccd_handle *,uint32_t *,uint32_t *,uint32_t *,uint32_t *,uint8_t *);
 
 /**
   @fn uint32_t CancelQHYCCDExposing(qhyccd_handle *handle)
@@ -231,7 +231,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL CancelQHYCCDExposing(qhyccd_handle *handle);
+EXPORTC uint32_t STDCALL CancelQHYCCDExposing(qhyccd_handle *);
 
 /**
   @fn uint32_t CancelQHYCCDExposingAndReadout(qhyccd_handle *handle)
@@ -250,7 +250,7 @@
 	  on success,return QHYCCD_SUCCESS \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL BeginQHYCCDLive(qhyccd_handle *handle);
+EXPORTC uint32_t STDCALL BeginQHYCCDLive(qhyccd_handle *);
 
 /**
       @fn uint32_t GetQHYCCDLiveFrame(qhyccd_handle *handle,uint32_t *w,uint32_t *h,uint32_t *bpp,uint32_t *channels,uint8_t *imgdata)
@@ -266,7 +266,7 @@
 	  QHYCCD_ERROR_GETTINGFAILED,if get data failed \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL GetQHYCCDLiveFrame(qhyccd_handle *handle,uint32_t *w,uint32_t *h,uint32_t *bpp,uint32_t *channels,uint8_t *imgdata);
+EXPORTC uint32_t STDCALL GetQHYCCDLiveFrame(qhyccd_handle *,uint32_t *,uint32_t *,uint32_t *,uint32_t *,uint8_t *);
 
 /** \fn uint32_t StopQHYCCDLive(qhyccd_handle *handle)
       \brief stop the camera continue exposing
@@ -275,7 +275,7 @@
 	  on success,return QHYCCD_SUCCESS \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL StopQHYCCDLive(qhyccd_handle *handle);
+EXPORTC uint32_t STDCALL StopQHYCCDLive(qhyccd_handle *);
 
 /** \
   @fn uint32_t SetQHYCCDBinMode(qhyccd_handle *handle,uint32_t wbin,uint32_t hbin)
@@ -287,7 +287,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
 */
-EXPORTC uint32_t STDCALL SetQHYCCDBinMode(qhyccd_handle *handle,uint32_t wbin,uint32_t hbin);
+EXPORTC uint32_t STDCALL SetQHYCCDBinMode(qhyccd_handle *,uint32_t,uint32_t);
 
 /**
    @fn uint32_t SetQHYCCDBitsMode(qhyccd_handle *handle,uint32_t bits)
@@ -298,7 +298,7 @@
    on success,return QHYCCD_SUCCESS \n
    another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL SetQHYCCDBitsMode(qhyccd_handle *handle,uint32_t bits);
+EXPORTC uint32_t STDCALL SetQHYCCDBitsMode(qhyccd_handle *,uint32_t);
 
 /** \fn uint32_t ControlQHYCCDTemp(qhyccd_handle *handle,double targettemp)
       \brief This is a auto temprature control for QHYCCD cameras. \n
@@ -309,7 +309,7 @@
           on success,return QHYCCD_SUCCESS \n
           another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL ControlQHYCCDTemp(qhyccd_handle *handle,double targettemp);
+EXPORTC uint32_t STDCALL ControlQHYCCDTemp(qhyccd_handle *,double);
 
 /** \fn uint32_t ControlQHYCCDGuide(qhyccd_handle *handle,uint32_t direction,uint16_t duration)
       \brief control the camera' guide port
@@ -324,7 +324,7 @@
 	  on success,return QHYCCD_SUCCESS \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL ControlQHYCCDGuide(qhyccd_handle *handle,uint32_t direction,uint16_t duration);
+EXPORTC uint32_t STDCALL ControlQHYCCDGuide(qhyccd_handle *,uint32_t,uint16_t);
 
 /**
  @fn uint32_t SendOrder2QHYCCDCFW(qhyccd_handle *handle,char *order,uint32_t length)
@@ -336,7 +336,7 @@
  on success,return QHYCCD_SUCCESS \n
  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL SendOrder2QHYCCDCFW(qhyccd_handle *handle,char *order,uint32_t length);
+EXPORTC uint32_t STDCALL SendOrder2QHYCCDCFW(qhyccd_handle *,char *,uint32_t);
 
 /**
  @fn 	uint32_t GetQHYCCDCFWStatus(qhyccd_handle *handle,char *status)
@@ -347,7 +347,7 @@
  on success,return QHYCCD_SUCCESS \n
  another QHYCCD_ERROR code on other failures
   */
-EXPORTC	uint32_t STDCALL GetQHYCCDCFWStatus(qhyccd_handle *handle,char *status);
+EXPORTC	uint32_t STDCALL GetQHYCCDCFWStatus(qhyccd_handle *,char *);
 
 /**
  @fn 	uint32_t IsQHYCCDCFWPlugged(qhyccd_handle *handle)
@@ -357,7 +357,7 @@
  on success,return QHYCCD_SUCCESS \n
  another QHYCCD_ERROR code on other failures
   */
-EXPORTC	uint32_t STDCALL IsQHYCCDCFWPlugged(qhyccd_handle *handle);
+EXPORTC	uint32_t STDCALL IsQHYCCDCFWPlugged(qhyccd_handle *);
 
 /**
  \fn   uint32_t SetQHYCCDTrigerMode(qhyccd_handle *handle,uint32_t trigerMode)
@@ -368,7 +368,7 @@
 on success,return QHYCCD_SUCCESS \n
 another QHYCCD_ERROR code on other failures
 */
-EXPORTC uint32_t STDCALL SetQHYCCDTrigerMode(qhyccd_handle *handle,uint32_t trigerMode);
+EXPORTC uint32_t STDCALL SetQHYCCDTrigerMode(qhyccd_handle *,uint32_t);
 
 /** \fn void Bits16ToBits8(qhyccd_handle *h,uint8_t *InputData16,uint8_t *OutputData8,uint32_t imageX,uint32_t imageY,uint16_t B,uint16_t W)
       \brief turn 16bits data into 8bits
@@ -380,7 +380,7 @@
       \param B for stretch balck
       \param W for stretch white
   */
-EXPORTC void STDCALL Bits16ToBits8(qhyccd_handle *h,uint8_t *InputData16,uint8_t *OutputData8,uint32_t imageX,uint32_t imageY,uint16_t B,uint16_t W);
+EXPORTC void STDCALL Bits16ToBits8(qhyccd_handle *,uint8_t *,uint8_t *,uint32_t,uint32_t,uint16_t,uint16_t);
 
 /**
    @fn void HistInfo192x130(qhyccd_handle *h,uint32_t x,uint32_t y,uint8_t *InBuf,uint8_t *OutBuf)
@@ -391,7 +391,7 @@
    @param InBuf for the raw image data
    @param OutBuf for 192x130 8bits 3 channels image
   */
-EXPORTC void  STDCALL HistInfo192x130(qhyccd_handle *h,uint32_t x,uint32_t y,uint8_t *InBuf,uint8_t *OutBuf);
+EXPORTC void  STDCALL HistInfo192x130(qhyccd_handle *,uint32_t,uint32_t,uint8_t *,uint8_t *);
 
 
 /**
@@ -399,7 +399,7 @@
     @brief download the firmware to camera.(this api just need call in OSX system)
     @param path path to HEX file
   */
-EXPORTC uint32_t STDCALL OSXInitQHYCCDFirmware(char *path);
+EXPORTC uint32_t STDCALL OSXInitQHYCCDFirmware(char *);
 
 /**
     @fn uint32_t OSXInitQHYCCDFirmware(char *path)
@@ -410,8 +410,7 @@
 
 
 
-EXPORTC uint32_t STDCALL OSXInitQHYCCDAndroidFirmwareArray(int idVendor,int idProduct,
-    qhyccd_handle *h);
+EXPORTC uint32_t STDCALL OSXInitQHYCCDAndroidFirmwareArray(int,int, qhyccd_handle *);
 
 
 
@@ -426,7 +425,7 @@
       @param pixelh chip pixel size height
       @param bpp chip pixel depth
   */
-EXPORTC uint32_t STDCALL GetQHYCCDChipInfo(qhyccd_handle *h,double *chipw,double *chiph,uint32_t *imagew,uint32_t *imageh,double *pixelw,double *pixelh,uint32_t *bpp);
+EXPORTC uint32_t STDCALL GetQHYCCDChipInfo(qhyccd_handle *,double *,double *,uint32_t *,uint32_t *,double *,double *,uint32_t *);
 
 /** @fn uint32_t GetQHYCCDEffectiveArea(qhyccd_handle *h,uint32_t *startX, uint32_t *startY, uint32_t *sizeX, uint32_t *sizeY)
       @brief get the camera's ccd/cmos chip info
@@ -439,7 +438,7 @@
 	  on success,return QHYCCD_SUCCESS \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL GetQHYCCDEffectiveArea(qhyccd_handle *h,uint32_t *startX, uint32_t *startY, uint32_t *sizeX, uint32_t *sizeY);
+EXPORTC uint32_t STDCALL GetQHYCCDEffectiveArea(qhyccd_handle *,uint32_t *, uint32_t *, uint32_t *, uint32_t *);
 
 /** @fn uint32_t GetQHYCCDOverScanArea(qhyccd_handle *h,uint32_t *startX, uint32_t *startY, uint32_t *sizeX, uint32_t *sizeY)
       @brief get the camera's ccd/cmos chip info
@@ -452,7 +451,7 @@
 	  on success,return QHYCCD_SUCCESS \n
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL GetQHYCCDOverScanArea(qhyccd_handle *h,uint32_t *startX, uint32_t *startY, uint32_t *sizeX, uint32_t *sizeY);
+EXPORTC uint32_t STDCALL GetQHYCCDOverScanArea(qhyccd_handle *,uint32_t *, uint32_t *, uint32_t *, uint32_t *);
 
 
 /** @fn uint32_t SetQHYCCDFocusSetting(qhyccd_handle *h,uint32_t focusCenterX, uint32_t focusCenterY)
@@ -465,7 +464,7 @@
  
 	  another QHYCCD_ERROR code on other failures
   */
-EXPORTC uint32_t STDCALL SetQHYCCDFocusSetting(qhyccd_handle *h,uint32_t focusCenterX, uint32_t focusCenterY);
+EXPORTC uint32_t STDCALL SetQHYCCDFocusSetting(qhyccd_handle *,uint32_t, uint32_t);
 
 /** @fn uint32_t GetQHYCCDExposureRemaining(qhyccd_handle *h)
       @brief Get remaining ccd/cmos expose time
@@ -474,7 +473,7 @@
       100 or less 100,it means exposoure is over \n
       another is remaining time
  */
-EXPORTC uint32_t STDCALL GetQHYCCDExposureRemaining(qhyccd_handle *h);
+EXPORTC uint32_t STDCALL GetQHYCCDExposureRemaining(qhyccd_handle *);
 
 /** @fn uint32_t GetQHYCCDFWVersion(qhyccd_handle *h,uint8_t *buf)
       @brief Get the QHYCCD's firmware version
@@ -485,7 +484,7 @@
  
 	  another QHYCCD_ERROR code on other failures
  */
-EXPORTC uint32_t STDCALL GetQHYCCDFWVersion(qhyccd_handle *h,uint8_t *buf);
+EXPORTC uint32_t STDCALL GetQHYCCDFWVersion(qhyccd_handle *,uint8_t *);
 
 /** @fn uint32_t SetQHYCCDInterCamSerialParam(qhyccd_handle *h,uint32_t opt)
       @brief Set InterCam serial2 params
@@ -502,7 +501,7 @@
  
 	  another QHYCCD_ERROR code on other failures
  */
-EXPORTC uint32_t STDCALL SetQHYCCDInterCamSerialParam(qhyccd_handle *h,uint32_t opt);
+EXPORTC uint32_t STDCALL SetQHYCCDInterCamSerialParam(qhyccd_handle *,uint32_t);
 
 /** @fn uint32_t QHYCCDInterCamSerialTX(qhyccd_handle *h,char *buf,uint32_t length)
       @brief Send data to InterCam serial2
@@ -514,7 +513,7 @@
  
 	  another QHYCCD_ERROR code on other failures
  */
-EXPORTC uint32_t STDCALL QHYCCDInterCamSerialTX(qhyccd_handle *h,char *buf,uint32_t length);
+EXPORTC uint32_t STDCALL QHYCCDInterCamSerialTX(qhyccd_handle *,char *,uint32_t);
 
 /** @fn uint32_t QHYCCDInterCamSerialRX(qhyccd_handle *h,char *buf)
       @brief Get data from InterCam serial2
@@ -525,7 +524,7 @@
  
 	  another QHYCCD_ERROR code on other failures
  */
-EXPORTC uint32_t STDCALL QHYCCDInterCamSerialRX(qhyccd_handle *h,char *buf);
+EXPORTC uint32_t STDCALL QHYCCDInterCamSerialRX(qhyccd_handle *,char *);
 
 /** @fn uint32_t QHYCCDInterCamOledOnOff(qhyccd_handle *handle,uint8_t onoff)
      @brief turn off or turn on the InterCam's Oled
@@ -537,7 +536,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
    */
-EXPORTC uint32_t STDCALL QHYCCDInterCamOledOnOff(qhyccd_handle *handle,uint8_t onoff);
+EXPORTC uint32_t STDCALL QHYCCDInterCamOledOnOff(qhyccd_handle *,uint8_t);
 
 /**
   @fn uint32_t SetQHYCCDInterCamOledBrightness(qhyccd_handle *handle,uint8_t brightness)
@@ -548,7 +547,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
 */
-EXPORTC uint32_t STDCALL SetQHYCCDInterCamOledBrightness(qhyccd_handle *handle,uint8_t brightness);
+EXPORTC uint32_t STDCALL SetQHYCCDInterCamOledBrightness(qhyccd_handle *,uint8_t);
 
 /**
   @fn uint32_t SendFourLine2QHYCCDInterCamOled(qhyccd_handle *handle,char *messagetemp,char *messageinfo,char *messagetime,char *messagemode)
@@ -562,7 +561,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
 */
-EXPORTC uint32_t STDCALL SendFourLine2QHYCCDInterCamOled(qhyccd_handle *handle,char *messagetemp,char *messageinfo,char *messagetime,char *messagemode);
+EXPORTC uint32_t STDCALL SendFourLine2QHYCCDInterCamOled(qhyccd_handle *,char *,char *,char *,char *);
 /**
   @fn uint32_t SendTwoLine2QHYCCDInterCamOled(qhyccd_handle *handle,char *messageTop,char *messageBottom)
   @brief spilit the message to two line,send to camera
@@ -573,7 +572,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
 */
-EXPORTC uint32_t STDCALL SendTwoLine2QHYCCDInterCamOled(qhyccd_handle *handle,char *messageTop,char *messageBottom);
+EXPORTC uint32_t STDCALL SendTwoLine2QHYCCDInterCamOled(qhyccd_handle *,char *,char *);
 
 /**
   @fn uint32_t SendOneLine2QHYCCDInterCamOled(qhyccd_handle *handle,char *messageTop)
@@ -584,7 +583,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
 */
-EXPORTC uint32_t STDCALL SendOneLine2QHYCCDInterCamOled(qhyccd_handle *handle,char *messageTop);
+EXPORTC uint32_t STDCALL SendOneLine2QHYCCDInterCamOled(qhyccd_handle *,char *);
 
 /**
   @fn uint32_t GetQHYCCDCameraStatus(qhyccd_handle *h,uint8_t *buf)
@@ -595,7 +594,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
  */
-EXPORTC uint32_t STDCALL GetQHYCCDCameraStatus(qhyccd_handle *h,uint8_t *buf);
+EXPORTC uint32_t STDCALL GetQHYCCDCameraStatus(qhyccd_handle *,uint8_t *);
 
 /**
  @fn uint32_t GetQHYCCDShutterStatus(qhyccd_handle *handle)
@@ -610,7 +609,7 @@
  0xff:IDLE \n
  another QHYCCD_ERROR code on other failures
 */
-EXPORTC uint32_t STDCALL GetQHYCCDShutterStatus(qhyccd_handle *handle);
+EXPORTC uint32_t STDCALL GetQHYCCDShutterStatus(qhyccd_handle *);
 
 /**
   @fn uint32_t ControlQHYCCDShutter(qhyccd_handle *handle,uint8_t status)
@@ -626,7 +625,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
 */
-EXPORTC uint32_t STDCALL ControlQHYCCDShutter(qhyccd_handle *handle,uint8_t status);
+EXPORTC uint32_t STDCALL ControlQHYCCDShutter(qhyccd_handle *,uint8_t);
 
 /**
   @fn uint32_t GetQHYCCDHumidity(qhyccd_handle *handle,double *hd)
@@ -637,7 +636,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
 */
-EXPORTC uint32_t STDCALL GetQHYCCDHumidity(qhyccd_handle *handle,double *hd);
+EXPORTC uint32_t STDCALL GetQHYCCDHumidity(qhyccd_handle *,double *);
 
 /**
   @fn uint32_t QHYCCDI2CTwoWrite(qhyccd_handle *handle,uint16_t addr,uint16_t value)
@@ -649,7 +648,7 @@
   on success,return QHYCCD_SUCCESS \n
   another QHYCCD_ERROR code on other failures
 */
-EXPORTC uint32_t STDCALL QHYCCDI2CTwoWrite(qhyccd_handle *handle,uint16_t addr,uint16_t value);
+EXPORTC uint32_t STDCALL QHYCCDI2CTwoWrite(qhyccd_handle *,uint16_t,uint16_t);
 
 /**
   @fn uint32_t QHYCCDI2CTwoRead(qhyccd_handle *handle,uint16_t addr)
@@ -658,7 +657,7 @@
   @param addr the address of register
   @return value of the addr register
 */
-EXPORTC uint32_t STDCALL QHYCCDI2CTwoRead(qhyccd_handle *handle,uint16_t addr);
+EXPORTC uint32_t STDCALL QHYCCDI2CTwoRead(qhyccd_handle *,uint16_t);
 
 /**
   @fn double GetQHYCCDReadingProgress(qhyccd_handle *handle)
@@ -666,47 +665,47 @@
   @param handle camera control handle
   @return current progress
 */
-EXPORTC double STDCALL GetQHYCCDReadingProgress(qhyccd_handle *handle);
+EXPORTC double STDCALL GetQHYCCDReadingProgress(qhyccd_handle *);
 
 
 /**
   test pid parameters
 */
-EXPORTC uint32_t STDCALL TestQHYCCDPIDParas(qhyccd_handle *h, double p, double i, double d);
+EXPORTC uint32_t STDCALL TestQHYCCDPIDParas(qhyccd_handle *, double, double, double);
 
-EXPORTC uint32_t STDCALL SetQHYCCDTrigerFunction(qhyccd_handle *h,bool value);
+EXPORTC uint32_t STDCALL SetQHYCCDTrigerFunction(qhyccd_handle *,bool);
 
-EXPORTC uint32_t STDCALL DownloadFX3FirmWare(uint16_t vid,uint16_t pid,char *imgpath);
+EXPORTC uint32_t STDCALL DownloadFX3FirmWare(uint16_t,uint16_t,char *);
 
-EXPORTC uint32_t STDCALL GetQHYCCDType(qhyccd_handle *h);
+EXPORTC uint32_t STDCALL GetQHYCCDType(qhyccd_handle *);
 
-EXPORTC uint32_t STDCALL SetQHYCCDDebayerOnOff(qhyccd_handle *h,bool onoff);
+EXPORTC uint32_t STDCALL SetQHYCCDDebayerOnOff(qhyccd_handle *,bool);
 
-EXPORTC uint32_t STDCALL SetQHYCCDFineTone(qhyccd_handle *h,uint8_t setshporshd,uint8_t shdloc,uint8_t shploc,uint8_t shwidth);
+EXPORTC uint32_t STDCALL SetQHYCCDFineTone(qhyccd_handle *,uint8_t,uint8_t,uint8_t,uint8_t);
 
-EXPORTC uint32_t STDCALL SetQHYCCDGPSVCOXFreq(qhyccd_handle *handle,uint16_t i);
+EXPORTC uint32_t STDCALL SetQHYCCDGPSVCOXFreq(qhyccd_handle *,uint16_t);
 
-EXPORTC uint32_t STDCALL SetQHYCCDGPSLedCalMode(qhyccd_handle *handle,uint8_t i);
+EXPORTC uint32_t STDCALL SetQHYCCDGPSLedCalMode(qhyccd_handle *,uint8_t);
 
-EXPORTC void STDCALL SetQHYCCDGPSLedCal(qhyccd_handle *handle,uint32_t pos,uint8_t width);
+EXPORTC void STDCALL SetQHYCCDGPSLedCal(qhyccd_handle *,uint32_t,uint8_t);
 
-EXPORTC void STDCALL SetQHYCCDGPSPOSA(qhyccd_handle *handle,uint8_t is_slave,uint32_t pos,uint8_t width);
+EXPORTC void STDCALL SetQHYCCDGPSPOSA(qhyccd_handle *,uint8_t,uint32_t,uint8_t);
 
-EXPORTC void STDCALL SetQHYCCDGPSPOSB(qhyccd_handle *handle,uint8_t is_slave,uint32_t pos,uint8_t width);
+EXPORTC void STDCALL SetQHYCCDGPSPOSB(qhyccd_handle *,uint8_t,uint32_t,uint8_t);
 
-EXPORTC uint32_t STDCALL SetQHYCCDGPSMasterSlave(qhyccd_handle *handle,uint8_t i);
+EXPORTC uint32_t STDCALL SetQHYCCDGPSMasterSlave(qhyccd_handle *,uint8_t);
 
-EXPORTC void STDCALL SetQHYCCDGPSSlaveModeParameter(qhyccd_handle *handle,uint32_t target_sec,uint32_t target_us,uint32_t deltaT_sec,uint32_t deltaT_us,uint32_t expTime);
+EXPORTC void STDCALL SetQHYCCDGPSSlaveModeParameter(qhyccd_handle *,uint32_t,uint32_t,uint32_t,uint32_t,uint32_t);
 
 EXPORTFUNC void STDCALL SetQHYCCDQuit();
 
-EXPORTC uint32_t STDCALL QHYCCDVendRequestWrite(qhyccd_handle *h,uint8_t req,uint16_t value,uint16_t index1,uint32_t length,uint8_t *data);
+EXPORTC uint32_t STDCALL QHYCCDVendRequestWrite(qhyccd_handle *,uint8_t,uint16_t,uint16_t,uint32_t,uint8_t *);
 
-EXPORTC uint32_t STDCALL QHYCCDReadUSB_SYNC(qhyccd_handle *pDevHandle, uint8_t endpoint, uint32_t length, uint8_t *data, uint32_t timeout);
+EXPORTC uint32_t STDCALL QHYCCDReadUSB_SYNC(qhyccd_handle *, uint8_t, uint32_t, uint8_t *, uint32_t);
 
-EXPORTC uint32_t STDCALL QHYCCDLibusbBulkTransfer(qhyccd_handle *pDevHandle, uint8_t endpoint, uint8_t *data, uint32_t length, int32_t *transferred, uint32_t timeout);
+EXPORTC uint32_t STDCALL QHYCCDLibusbBulkTransfer(qhyccd_handle *, uint8_t, uint8_t *, uint32_t, int32_t *, uint32_t);
 
-EXPORTC uint32_t STDCALL GetQHYCCDSDKVersion(uint32_t *year,uint32_t *month,uint32_t *day,uint32_t *subday);
+EXPORTC uint32_t STDCALL GetQHYCCDSDKVersion(uint32_t *,uint32_t *,uint32_t *,uint32_t *);
 
 
 
@@ -717,15 +716,15 @@
 //readout mode to set it. The host application need to get the readout mode and select one to set it. The sequece that call this fucntion need to be(......)
 
 
-EXPORTC uint32_t STDCALL GetQHYCCDNumberOfReadModes(qhyccd_handle *h,uint32_t *numModes);
+EXPORTC uint32_t STDCALL GetQHYCCDNumberOfReadModes(qhyccd_handle *,uint32_t *);
 // Get the maximum resolution for a read mode
-EXPORTC uint32_t STDCALL GetQHYCCDReadModeResolution(qhyccd_handle *h,uint32_t modeNumber, uint32_t* width, uint32_t* height);
+EXPORTC uint32_t STDCALL GetQHYCCDReadModeResolution(qhyccd_handle *,uint32_t, uint32_t*, uint32_t*);
 // Get the name of a read mode
-EXPORTC uint32_t STDCALL GetQHYCCDReadModeName(qhyccd_handle *h,uint32_t modeNumber, char* name);
+EXPORTC uint32_t STDCALL GetQHYCCDReadModeName(qhyccd_handle *,uint32_t, char*);
 // Set the read mode
-EXPORTC uint32_t STDCALL SetQHYCCDReadMode(qhyccd_handle *h,uint32_t modeNumber);
+EXPORTC uint32_t STDCALL SetQHYCCDReadMode(qhyccd_handle *,uint32_t);
 // Get the read mode
-EXPORTC uint32_t STDCALL GetQHYCCDReadMode(qhyccd_handle *h,uint32_t* modeNumber);
+EXPORTC uint32_t STDCALL GetQHYCCDReadMode(qhyccd_handle *,uint32_t*);
 
 
 #endif
